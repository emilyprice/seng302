package seng302;

import java_cup.runtime.*;
import seng302.command.*;
import seng302.utility.OctaveUtil;
import seng302.data.Note;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import seng302.DslSymbol;

/*
    The following block lets you inject code into the parser class

    See: http://www2.cs.tum.edu/projects/cup/docs.php#parser
*/


parser code {:

    private String errorMessage = "";
    public void report_error(String message, Object info) {


    }

    public void syntax_error(Symbol cur_token) {
        //System.out.println(cur_token.value);
        //System.out.println(cur_token);

        Symbol prev_token = (Symbol) this.stack.pop();
        //System.out.println(prev_token);


        String prevTokenName = DslSymbol.terminalNames[prev_token.sym];


        if (prevTokenName.equals("COMMAND_NOTE")){ // Expect a MIDI.
            errorMessage = "\'" + cur_token.value + "\'" + " is not a valid MIDI value.";
        } else if (prevTokenName.equals("EOF")) {
            errorMessage = "\'" + cur_token.value + "\'" + " is not a valid command.";
        } else if (prevTokenName.equals("NOTE")) { // so cur_token could be a scale_type or a note duration.
            Symbol prev_token2 = (Symbol) this.stack.pop();
            String command = DslSymbol.terminalNames[prev_token2.sym];
            if (command.equals("COMMAND_PLAY_SCALE") || command.equals("COMMAND_SCALE") ||
                command.equals("COMMAND_MIDI_SCALE")) { // cur_token should be scale type.
                errorMessage = "\'" + cur_token.value + "\'" + " is not a valid scale type.";
            } else if (command.equals("COMMAND_PLAY_NOTE")) {
                errorMessage = "\'" + cur_token.value + "\'" + " is not a valid duration.";
            } else {
                errorMessage = "Invalid command. Please type 'help' to see the list of valid commands.";
            }
        } else if (prevTokenName.equals("COMMAND_SET_TEMPO") ||
                   prevTokenName.equals("COMMAND_FORCE_SET_TEMPO")) {
            errorMessage = "\'" + cur_token.value + "\'" + " is not a valid tempo.";
        } else if (prevTokenName.equals("COMMAND_INTERVAL") ||
                   prevTokenName.equals("COMMAND_PLAY_INTERVAL")) {
            errorMessage = "\'" + cur_token.value + "\'" + " is not a valid interval.";
        } else if (prevTokenName.equals("COMMAND_ADD_MUSICAL_TERM") ||
                   prevTokenName.equals("COMMAND_MUSICAL_TERM")) {
            errorMessage = "Please provide the name, origin, category and definition of the musical term.";
        } else if (prevTokenName.equals("COMMAND_MIDI") ||
                   prevTokenName.equals("COMMAND_SEMITONE_UP") ||
                   prevTokenName.equals("COMMAND_SEMITONE_DOWN") ||
                   prevTokenName.equals("COMMAND_ENHARMONIC_HIGHER") ||
                   prevTokenName.equals("COMMAND_ENHARMONIC_LOWER") ||
                   prevTokenName.equals("COMMAND_SIMPLE_ENHARMONIC") ||
                   prevTokenName.equals("COMMAND_PLAY_NOTE") ||
                   prevTokenName.equals("INTERVAL") ||
                   prevTokenName.equals("COMMAND_SCALE")) {
            errorMessage = "\'" + cur_token.value + "\'" + " is not a valid note.";
        } else {
            errorMessage = "Invalid input for this command. Please type 'help' and the command you want to use for more information.";
        }

    }

    public String getErrorMessage(){
        return errorMessage;
    }

    private String currentCommand;

:};

/* Terminal tokens returns by the lexer */
terminal COMMAND_HELP, COMMAND_NOTE, COMMAND_MIDI, COMMAND_VERSION, COMMAND_SEMITONE_UP,
COMMAND_SEMITONE_DOWN, COMMAND_SCALE, COMMAND_TEMPO, COMMAND_MIDI_SCALE, COMMAND_ENHARMONIC_LOWER,
COMMAND_ENHARMONIC_HIGHER, COMMAND_SIMPLE_ENHARMONIC, COMMAND_SET_TEMPO, COMMAND_CROTCHET_DURATION,
COMMAND_PLAY_NOTE, COMMAND_FORCE_SET_TEMPO, COMMAND_PLAY_SCALE, COMMAND_MUSICAL_TERM_MEANING,
COMMAND_MUSICAL_TERM_ORIGIN, COMMAND_MUSICAL_TERM_CATEGORY, COMMAND_ADD_MUSICAL_TERM,
COMMAND_INTERVAL, COMMAND_PLAY_INTERVAL,COMMAND_ALL_ENHARMONICS, SEMIC, COMMAND_UNDO,
COMMAND_REDO, COMMAND_TWINKLE, COMMAND_CHORD, COMMAND_PLAY_CHORD;

terminal String ATOM, NOTE, SCALE_TYPE, DIRECTION, MIDINOTE, NUMBER, POSNUM, INTERVAL;

/* Non terminals */
non terminal Command command;
non terminal String note;
non terminal HashMap<String, String> scale;
non terminal HashMap<String, String> playScale;
non terminal ArrayList<String> musicalDef;
non terminal String midiNote;
non terminal String positiveNum;
non terminal HashMap<String, String> interval;
non terminal HashMap<String, String> intervalWithTonic;
non terminal String keyword;
non terminal String singleTerm;
non terminal String term;

start with command;

command ::= COMMAND_HELP                                {: RESULT = new Help(); :}
          | COMMAND_HELP keyword:n                      {: RESULT = new Help(n); :}
          | COMMAND_NOTE note:n                         {: RESULT = new NoteCommand(n); :}
          | COMMAND_MIDI note:s                         {: RESULT = new Midi(s); :}
          | COMMAND_VERSION                             {: RESULT = new Version(); :}
          | COMMAND_INTERVAL interval:i                 {: RESULT = new IntervalCommand(i,"semitones"); :}
          | COMMAND_INTERVAL intervalWithTonic:i        {: RESULT = new IntervalCommand(i,"note"); :}
          | COMMAND_PLAY_INTERVAL intervalWithTonic:i   {: RESULT = new IntervalCommand(i,"play"); :}
          | COMMAND_SEMITONE_UP note:s                  {: RESULT = new Semitone(s, true); :}
          | COMMAND_SEMITONE_DOWN note:s                {: RESULT = new Semitone(s, false); :}
          | COMMAND_TEMPO                               {: RESULT = new Tempo(); :}
          | COMMAND_SCALE scale:s                       {: RESULT = new Scale(s, "note"); :}
          | COMMAND_MIDI_SCALE scale:s                  {: RESULT = new Scale(s, "midi"); :}
          | COMMAND_ENHARMONIC_HIGHER note:s            {: RESULT = new Enharmonic(s, 0); :}
          | COMMAND_ENHARMONIC_LOWER note:s             {: RESULT = new Enharmonic(s, 1); :}
          | COMMAND_SIMPLE_ENHARMONIC note:s            {: RESULT = new Enharmonic(s, 2); :}
          | COMMAND_SET_TEMPO positiveNum:s             {: RESULT = new Tempo(s, false); :}
          | COMMAND_FORCE_SET_TEMPO positiveNum:s       {: RESULT = new Tempo(s, true); :}
          | COMMAND_CROTCHET_DURATION                   {: RESULT = new CrotchetDuration(); :}
          | COMMAND_PLAY_NOTE note:s                    {: RESULT = new PlayNote(s); :}
          | COMMAND_PLAY_NOTE note:s positiveNum:d      {: RESULT = new PlayNote(s, d); :}
          | COMMAND_MUSICAL_TERM_MEANING term:s         {: RESULT = new MusicalTerm(s, "meaning"); :}
          | COMMAND_MUSICAL_TERM_ORIGIN term:s          {: RESULT = new MusicalTerm(s, "origin"); :}
          | COMMAND_MUSICAL_TERM_CATEGORY term:s        {: RESULT = new MusicalTerm(s, "category"); :}
          | COMMAND_ADD_MUSICAL_TERM musicalDef:s       {: RESULT = new MusicalTerm(s); :}
          | COMMAND_PLAY_SCALE playScale:s              {: RESULT = new Scale(s, "play");:}
          | COMMAND_ALL_ENHARMONICS note:s              {: RESULT = new Enharmonic(s, 3); :}
          | COMMAND_UNDO                                {: RESULT = new UndoRedo(0); :}
          | COMMAND_REDO                                {: RESULT = new UndoRedo(1); :}
          | COMMAND_TWINKLE                             {: RESULT = new Twinkle(); :}
          | COMMAND_CHORD scale:s                       {: RESULT = new Chord(s, "chord"); :}
          | COMMAND_PLAY_CHORD playScale:s              {: RESULT = new Chord(s, "play");:}
;


note ::= NOTE:s             {:RESULT = s;:}
       | midiNote:s         {:RESULT = s;:}
;

midiNote ::= MIDINOTE:s     {:RESULT = s;:}
           | NUMBER:s       {:RESULT = s;:}
;

positiveNum ::= midiNote:s   {:RESULT = s;:}
              | POSNUM:s     {:RESULT = s;:}
;

scale ::= NOTE:s SCALE_TYPE:r       {:RESULT = new HashMap<String,String>(); RESULT.put("note", s);
                                                RESULT.put("scale_type", r);:}
;

playScale ::= scale:s {:RESULT = s;:}
            |   scale:s DIRECTION:a {: s.put("direction", a); RESULT = s;:}
            |   scale:s NUMBER:a {: s.put("octaves", String.valueOf(a)); RESULT = s;:}
            |   scale:s NUMBER:a DIRECTION:b {: s.put("octaves", String.valueOf(a)); s.put("direction", b); RESULT = s;:}
            |   scale:s DIRECTION:b NUMBER:a {: s.put("octaves", String.valueOf(a)); s.put("direction", b); RESULT = s;:}
;

interval ::= INTERVAL:i {: RESULT = new HashMap<String,String>(); RESULT.put("interval", i);:}
           | positiveNum:a {: RESULT = new HashMap<String,String>(); RESULT.put("semitones", a);:}
;

intervalWithTonic ::= interval:i note:a {: i.put("note",a); RESULT = i;:}
;

keyword ::= COMMAND_HELP                                {: RESULT = "help"; :}
          | COMMAND_VERSION                             {: RESULT = "version"; :}
          | COMMAND_TEMPO                               {: RESULT = "tempo"; :}
          | COMMAND_NOTE                                {: RESULT = "note"; :}
          | COMMAND_MIDI                                {: RESULT = "midi"; :}
          | COMMAND_SCALE                               {: RESULT = "scale"; :}
          | COMMAND_INTERVAL                            {: RESULT = "interval"; :}
          | COMMAND_PLAY_NOTE                           {: RESULT = "play"; :}
          | COMMAND_PLAY_SCALE                          {: RESULT = "play scale"; :}
          | COMMAND_PLAY_INTERVAL                       {: RESULT = "play interval"; :}
          | COMMAND_SEMITONE_UP                         {: RESULT = "semitone up"; :}
          | COMMAND_SEMITONE_DOWN                       {: RESULT = "semitone down"; :}
          | COMMAND_MIDI_SCALE                          {: RESULT = "midi scale";:}
          | COMMAND_ENHARMONIC_HIGHER                   {: RESULT = "enharmonic higher";:}
          | COMMAND_ENHARMONIC_LOWER                    {: RESULT = "enharmonic lower";:}
          | COMMAND_SIMPLE_ENHARMONIC                   {: RESULT = "simple enharmonic";:}
          | COMMAND_SET_TEMPO                           {: RESULT = "set tempo";:}
          | COMMAND_FORCE_SET_TEMPO                     {: RESULT = "force set tempo";:}
          | COMMAND_CROTCHET_DURATION                   {: RESULT = "crotchet duration"; :}
          | COMMAND_MUSICAL_TERM_MEANING                {: RESULT = "meaning of"; :}
          | COMMAND_MUSICAL_TERM_ORIGIN                 {: RESULT = "origin of"; :}
          | COMMAND_MUSICAL_TERM_CATEGORY               {: RESULT = "category of"; :}
          | COMMAND_ADD_MUSICAL_TERM                    {: RESULT = "add musical term"; :}
          | COMMAND_TWINKLE                             {: RESULT = "twinkle"; :}
          | COMMAND_CHORD                               {: RESULT = "chord"; :}
          | COMMAND_PLAY_CHORD                          {: RESULT = "play chord"; :}
;

singleTerm ::= keyword:s {: RESULT = s;:}
       | ATOM:s {: RESULT = s;:}
       | note:s {: RESULT = s;:}
       | SCALE_TYPE:s {:RESULT = s;:}
       | DIRECTION:s   {:RESULT = s;:}
       | INTERVAL:i    {:RESULT = i;:}
;

term ::= singleTerm:s {:RESULT =s;:}
       | term:s singleTerm:t {:RESULT = s + " " + t; :}
;

musicalDef ::= term:a SEMIC term:b SEMIC term:c SEMIC term:d
                {: RESULT = new ArrayList<String>(); RESULT.add(a.toLowerCase());
                   RESULT.add(b.toLowerCase()); RESULT.add(c.toLowerCase()); RESULT.add(d.toLowerCase());:}
             | error:e
                {: errorMessage = "Please provide the name, origin, category and definition of the " +
                   "musical term, separated by semicolons.";:}
;






